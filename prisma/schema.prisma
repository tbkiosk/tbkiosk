// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  address       String?
  name          String?
  email         String?  @unique
  emailVerified Boolean?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likedProjects String[] @db.ObjectId

  accounts Account[]

  @@map("user")
}

model Account {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  providerAccountName String?
  isPrimary           Boolean?
  refresh_token       String?  @db.String
  access_token        String?  @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.String
  session_state       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

// ----------------------------------------------------------------

model CreatorAccount {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              CreatorUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([provider, providerAccountId])
  @@map("creator_accounts")
}

model CreatorSession {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String      @unique
  userId       String      @db.ObjectId
  expires      DateTime
  user         CreatorUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creator_sessions")
}

model CreatorUser {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      CreatorAccount[]
  sessions      CreatorSession[]
  address       String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  projects      Project[]
  twitter       TwitterProfile?
  discord       DiscordProfile?
  role          Role             @default(User)

  @@map("creator_users")
}

model AdminWallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String @unique

  @@map("creator_admin_wallets")
}

enum Role {
  User
  Admin
}

type TwitterProfile {
  id       String
  name     String?
  username String?
  image    String?
}

type DiscordProfile {
  id       String
  name     String?
  username String?
  image    String?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("creator_verification_tokens")
}

model Project {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  blockchains    ProjectBlockchain[] @default([])
  name           String
  logoUrl        String
  description    String
  website        String?
  twitter        String?
  discord        String?
  slug           String              @unique
  bannerImage    String
  categories     Category[]
  previewImages  String[]
  projectStage   ProjectStage
  status         ProjectStatus
  rejectedReason String?
  isFeatured     Boolean             @default(false)
  viewCount      Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String              @db.ObjectId
  user           CreatorUser         @relation(fields: [userId], references: [id])

  @@map("creator_projects")
}

enum ProjectStatus {
  Draft
  InReview
  Published
  Rejected
}

enum ProjectStage {
  Mainnet
  InDevelopment
}

enum Category {
  NFT
  Game
  DeFi
  Tooling
  Dao
  Infrastructure
  Social
  Others
}

enum ProjectBlockchain {
  Ethereum
  Polygon
  Solana
  Sui
  BSC
}

// ----------------------------------------------------------------

model TBAUser {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  address            String           @unique
  owner_address      String
  amount             Int
  token_address_from String
  token_address_to   String
  frequency          Int
  end_date           DateTime?
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  is_active          Boolean
  next_swap          DateTime
  swap_history       SwapHistory[]
  deposit_history    DepositHistory[]

  @@map("tba_user")
}

model SwapHistory {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  address            String
  tba_user           TBAUser   @relation(fields: [address], references: [address])
  token_address_from String
  token_address_to   String
  amount             Int
  date               DateTime
  success            Boolean
  reason             String?
  tx                 String?
}

model DepositHistory {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  address  String
  tba_user TBAUser   @relation(fields: [address], references: [address])
  amount   Int
  date     DateTime?
}
